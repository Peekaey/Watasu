@page "/"
@using Watasu.Interfaces
@using Watasu.Models
@using Watasu.Service
@inject IWebService WebService
@inject ISnackbar Snackbar
@inject ApplicationConfigurationSettings AppConfig

<PageTitle>Watasu | Send</PageTitle>

<div style="text-align: center; margin-top: 3rem;">
    <h2>Upload file for transfer to CorelDRAW</h2>
</div>

@if (!string.IsNullOrEmpty(_imagePreviewUrl))
{
    <div style="text-align: center; margin-bottom: 1rem; border-radius: 5px; overflow: hidden;">
        <img src="@_imagePreviewUrl" alt="Preview" style="width: 80vw; max-width: 80%; max-height: 600px; border: 1px solid #ccc; border-radius: 5px;" />
    </div>
}

<MudForm>
    <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="2">
        <MudText Typo="Typo.body1" Style="margin-left: 8px;">
            @_files?.FirstOrDefault()?.Name
        </MudText>
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="width: 150px;">
                    Upload File
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
        
        <MudTextField
            @bind-Value="Passcode"
            Label="Passcode"
            Style="text-align: center;"
            LabelStyle="text-align: center;"
            
            AutoGrow="true"
            Variant="Variant.Text">
        </MudTextField>

        <MudButton
            OnClick="SubmitForm"
            Style="@(_files.Any() ? "margin-top: 16px; background-color: green; color: white; width: 150px;" : "margin-top: 16px; width: 150px;")"
            Disabled="@(!_files.Any())"
            Color="@(_files.Any() ? Color.Success : Color.Default)">
            Transfer File
        </MudButton>
    </MudStack>
</MudForm>

@code {
    private readonly IList<IBrowserFile> _files = new List<IBrowserFile>();
    private string? _imagePreviewUrl;
    public required string Passcode { get; set; }

    public async Task UploadFiles(IBrowserFile? file)
    {
        if (file == null)
        {
            Snackbar.Add("No file was selected.", Severity.Warning);
            return;
        }
        _files.Clear();
        _files.Add(file);

        // Validate file type before uploaded
        if (!AppConfig.IsValidFileType(file.ContentType))
        {
            Snackbar.Add("Invalid file type. Only JPEG, JPG, PNG, and GIF are allowed", Severity.Warning);
            _imagePreviewUrl = null;
            _files.Clear();
            return;
        }
        
        if (file.ContentType.StartsWith("image/"))
        {
            try
            {
                using (var stream = file.OpenReadStream(maxAllowedSize: 20_000_000))
                {
                    using var ms = new MemoryStream();
                    await stream.CopyToAsync(ms);
                    var base64 = Convert.ToBase64String(ms.ToArray());
                    _imagePreviewUrl = $"data:{file.ContentType};base64,{base64}";
                }
            }
            catch (IOException ex)
            {
                Snackbar.Add($"Error reading file for preview: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            _imagePreviewUrl = null;
        }
    }

    public async Task SubmitForm()
    {
        var result = await  WebService.TransferFile(_files, Passcode, SendLocationEnum.CorelDraw);

        if (result.Success)
        {
            Snackbar.Add("File transferred successfully.", Severity.Success);

        }
        else
        {
            Snackbar.Add($"Error: {result.Error}", Severity.Error);
        }
    }
}